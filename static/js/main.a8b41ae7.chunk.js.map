{"version":3,"sources":["components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","useState","time","setTime","isActive","setIsActive","reset","useEffect","interval","console","log","setInterval","clearInterval","className","onClick","style","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAmDeA,G,MAhDD,WAAO,IAAD,EACMC,mBAAS,IADf,mBACXC,EADW,KACLC,EADK,OAEcF,oBAAS,GAFvB,mBAEXG,EAFW,KAEDC,EAFC,KAQlB,SAASC,IACPH,EAAQ,IACRE,GAAY,GAiBd,OAdAE,qBAAU,WACR,IAAIC,EAAW,KAUf,OATAC,QAAQC,IAAR,kGAAiCR,EAAjC,MAEIE,EACFI,EAAWG,aAAY,WACrBR,GAAQ,SAACD,GAAD,OAAWA,EAAO,EAAIA,EAAO,EAAII,SACxC,KACMF,GAAqB,IAATF,GACrBU,cAAcJ,GAET,kBAAMI,cAAcJ,MAC1B,CAACJ,EAAUF,IAGZ,yBAAKW,UAAU,WACb,yBAAKA,UAAU,QAAQX,EAAvB,KACA,yBAAKW,UAAU,OACb,4BACEA,UAAS,iBAAYT,EAAW,SAAW,YAC3CU,QA5BR,WACET,GAAaD,KA6BNA,EAAW,QAAU,SAExB,4BAAQS,UAAU,SAASC,QAASR,GAApC,UAIF,yBACEO,UAAU,YACVE,MAAO,CAAEC,MAAM,QAAD,OAAUd,EAAV,sBAA4BD,mBAAS,IAArC,YClCPgB,MARf,WACE,OAED,kBAAC,EAAD,OCKmBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.a8b41ae7.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Timer = () => {\r\n  const [time, setTime] = useState(30);\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n \r\n  function toggle() {\r\n    setIsActive(!isActive);\r\n  }\r\n  function reset() {\r\n    setTime(30);\r\n    setIsActive(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    console.log(`Залишилось часу:  ${time}s`);\r\n\r\n    if (isActive) {\r\n      interval = setInterval(() => {\r\n        setTime((time) => (time > 0 ? time - 1 : reset()));\r\n      }, 1000);\r\n    } else if (isActive && time !== 0) {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isActive, time]);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <div className=\"time\">{time}s</div>\r\n      <div className=\"row\">\r\n        <button\r\n          className={`button ${isActive ? \"active\" : \"inactive\"}`}\r\n          onClick={toggle}\r\n        >\r\n          {isActive ? \"Pause\" : \"Start\"}\r\n        </button>\r\n        <button className=\"button\" onClick={reset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"timer-row\"\r\n        style={{ width: `calc(${time} * (100% / ${useState(30)}))` }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\nexport default Timer;\r\n","import React from 'react';\nimport Timer from './components/Timer'\n\n\nfunction App() {\n  return (\n   \n <Timer/>\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}